pgmImage – Handles operations involved in image manipulation including reading images, writing images, destruction operations (freeing image memory) and initialising pgm structures. The module will be used in pgmConversion will use pgmError. This allows for effective modularisation as its means that reading/writing to these files will not require repeated code in other modules, reducing time wasted when increasing functionality. May involve the definition of a pgm structure to encapsulate data.
pgmError – Holds a set of functions for handling errors within pgm images and to ensure proposed images are of the expected format. This will include checking the magic number, failed comment reads, the image dimensions, max/min grey values. Therefore, when reading or writing pgm files, we can easily verify that they are valid and thereby avoid cascading failures. The module will use exceptionHandling. 
exceptionHandling – In the pgmEcho program there are many places where the system must exit, and thus localising the process is logical. This module will handle exit messages, clean-up operations and errors that are external to pgm images (such as invalid arg count, invalid filenames, freeing memory of non-pgm related data). The effect of which should enable safe system closure and reduce redundancy in code. The module will be used in all programmes and most modules.
pgmConversion – facilities the conversion of pgm images between both ascii and binary (pgmb2a and pgma2b). This allows for modules to provide compatibility in the types of files that they can process, and can be used in various programmes without repetitive code. The module will require use of pgmImage and pgmError. 
